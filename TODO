* Different directories views. Different layouts and presentations for 'dir' nodes.
* Render special HTML for when browsing from particular clients. For example, don't render the TOC when browsing from Emacs. A _client parameter in request could be used for this.
* An Emacs webinfo-minor-mode, that works over ewww (web browsing mode). Implements key bindings for navigation. Also a custom toolbar with navigation buttons, etc. A mix of remote/web info system, plus a special local client for navigation and more.
* Themes.
* Switch between look at a document splitted or not (render all nodes in a single document).
* Special options (or metadata) in texinfo source (macros) for specifying special webinfo options, like wether rendering the document split or not, etc.
* Implement syntax highlighting for definitions (@deffn, @defvr, etc), like info-colors.
* Settings.
* Fulltext search.
* Read HTML documents.
* Option controlled by settings to apply some parser to docstrings. For example, one could transform any upcase symbols to a link to an indexed search. Also, a global parser settings (applies to whole text).
* Use _c=desktop for desktop webinfo client.
* Implement navigation urls, <nodename>/top, <nodename>/next, etc, that redirect to the appropiate node. This is needed to be able to control the navigation from outside (for example, from the Emacs/Web client).
* CLON command line interface and binary packages. A portable binary desktop application based on webview.
* Return different formats on URLs based on HTTP request 'Accept' media type' (json, html, pdf, etc).
* Links to download the document in different formats (setting).
* Consider CDB (https://github.com/xach/zcdb) as file format for Webinfo documents?
* Detailed Node Listing page.
* Setting to display breadcrumb navigation like in Emacs Info reader. The navigation bar with TOC and search should also be a setting.
* Use a special WebInfo HTTP header, so that a web browser client can detect it is accessing a WebInfo instance. That is useful for toggling Emacs Webinfo minor mode automatically.
* Try this highlighter: https://github.com/orthecreedence/highlight-lisp
* Parse and consider `symbol' syntax in docstrings. See: https://www.emacswiki.org/emacs/DocString.
* Consider using an on-disk btree data structure for the global webinfo index, important for webinfo repository with lots of documents. cl-btree library?. Or implement bindings to QDBM C library (https://dbmx.net/qdbm/).
* Module to generate TexInfo reference documentation for an ASDF system, so that it can be used via @include from a user manual. Special macros @cldeffn, @cldefvar, etc, that create appropiate <package>:<symbol> indexes. Also optional creation of source code documents and references to it (parse source code and include @anchor commands. Then reference from functions definitions.).
* Potential doc <-> lisp integration. Implement an Emacs/SLIME WebInfo reader, that accesses WebInfo via api, and renders the document itself. Could display "eval in slime" buttons along @example and @lisp sections.
* See Texinfo HTML output generated here: https://www.gnu.org/software/texinfo/manual/texinfo-html/index.html
* An INFO files parser and renderer. Use it to load the Linux info directory /usr/share/info and experiment with how WebInfo is able to replace normal info reader.