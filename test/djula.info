This is djula.info, produced by makeinfo version 6.7 from djula.texi.

INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* Djula: (djula). Common Lisp template system
END-INFO-DIR-ENTRY


File: djula.info,  Node: Top,  Next: Introduction,  Up: (dir)

Top
***

* Menu:

* Introduction::
* Basics::
* Usage::
* Variables::
* Tags::
* Comments::
* Verbatim::
* Filters::
* Template inheritance::
* Internationalization::
* Error handling::
* Automatic HTML escaping::
* Custom tag and filter libraries::
* Variable Index::
* Function Index::
* Concept Index::


File: djula.info,  Node: Introduction,  Next: Basics,  Prev: Top,  Up: Top

1 Introduction
**************

Djula is an HTML templating system similar to Django templates for
Common Lisp.

   Djula's template language is designed to strike a balance between
power and ease.  It's designed to feel comfortable to those used to
working with HTML.

   Philosophy

   If you have a background in programming, or if you're used to
languages which mix programming code directly into HTML, you'll want to
bear in mind that the Djula template system is not simply Common Lisp
code embedded into HTML. This is by design: the template system is meant
to express presentation, not program logic.

   The Djula template system provides tags which function similarly to
some programming constructs - an 'if' tag for boolean tests, a 'for' tag
for looping, etc.  - but these are not simply executed as the
corresponding Lisp code, and the template system will not execute
arbitrary Lisp expressions.  Only the tags, filters and syntax listed
below are supported by default (although you can add 'your own
extensions </howto/custom-template-tags>' to the template language as
needed).

* Menu:

* Prerequisites::
* Installation::


File: djula.info,  Node: Prerequisites,  Next: Installation,  Up: Introduction

1.1 Prerequisites
=================

TODO: list of Common Lisp compilers Djula works on.


File: djula.info,  Node: Installation,  Prev: Prerequisites,  Up: Introduction

1.2 Installation
================

Djula is available on Quicklisp:

(ql:quickload :djula)


File: djula.info,  Node: Basics,  Next: Usage,  Prev: Introduction,  Up: Top

2 Basics
********

A template is simply a text file.  It can generate any text-based format
(HTML, XML, CSV, etc.).

   A template contains *variables*, which get replaced with values when
the template is evaluated, and *tags*, which control the logic of the
template.

   Below is a minimal template that illustrates a few basics.  Each
element will be explained later in this document.

{% extends "base.html" %}

{% block title %}{{ section.title }}{% endblock %}

{% block content %}
<h1>{{ section.title }}</h1>

{% for story in story_list %}
<h2>
  <a href="{{ story.url }}">
    {{ story.headline|upper }}
  </a>
</h2>
<p>{{ story.tease|truncatewords:100 }}</p>
{% endfor %}
{% endblock %}


File: djula.info,  Node: Usage,  Next: Variables,  Prev: Basics,  Up: Top

3 Usage
*******

To render our templates, they need to be compiled first.  We do that
with the :cl'COMPILE-TEMPLATE*' function.  For inheritance to work, we
need to put all the templates in the same directory so that Djula can
find them when resolving templates inheritance.

   Djula looks for templates in the :cl'*CURRENT-STORE*'.  For our
templates to be found, we have to add the template folder path the
templates store.  We can do that with the :cl'add-template-directory'
function.

   Here is an example:

(add-template-directory (asdf:system-relative-pathname "webapp" "templates/"))

(defparameter +base.html+ (djula:compile-template* "base.html"))

(defparameter +welcome.html+ (djula:compile-template* "welcome.html"))

(defparameter +contact.html+ (djula:compile-template* "contact.html"))

   Then we can render our compiled templates using the
:cl'RENDER-TEMPLATE*' function:

(djula:render-template* +welcome.html+ s
            :title "Ukeleles"
            :project-name "Ukeleles"
            :mode "welcome")

* Menu:

* Auto-reload::
* API::


File: djula.info,  Node: Auto-reload,  Next: API,  Up: Usage

3.1 Auto-reload
===============

By default, Djula automatically recompiles the templates when they
change.

   If you want to disable this, use the :djula-prod _feature_:

(push :djula-prod *features*)


File: djula.info,  Node: API,  Prev: Auto-reload,  Up: Usage

3.2 API
=======


File: djula.info,  Node: Variables,  Next: Tags,  Prev: Usage,  Up: Top

4 Variables
***********

Variables look like this: '{{ variable }}'.  When the template engine
encounters a variable, it evaluates that variable and replaces it with
the result.  Variable names consist of any combination of alphanumeric
characters and the underscore ('"_"').  The dot ('"."') also appears in
variable sections, although that has a special meaning, as indicated
below.  Importantly, _you cannot have spaces or punctuation characters
in variable names._

   Use a dot ('.') to access attributes of a variable.

   Behind the scenes

   For accessing variables the 'ACCESS' Common Lisp library is used:
<https://github.com/AccelerationNet/access> In the above example, '{{
section.title }}' will be replaced with the 'title' attribute of the
'section' object.

   Note that "bar" in a template expression like '{{ foo.bar }}' will be
interpreted as a literal string and not using the value of the variable
"bar", if one exists in the template context.

* Menu:

* Default template variables::


File: djula.info,  Node: Default template variables,  Up: Variables

4.1 Default template variables
==============================

You can use the '*default-template-arguments*' variable to store
arguments that will be available for all templates.  It is a plist, so
use getf to add arguments, like this:

(setf (getf djula:*default-template-arguments* :foo) 'some-value)

   And now, you can access '{{ foo }}' in your template.

   This is useful when you have many templates that rely on the same set
of variables.  Use this variable to refactor your code when appropriate.

   Note that you could also write a function that wraps
'render-template*' and uses a default list of variables plus other ones
given as arguments:

(defun my-render-template (template stream &rest args)
  (apply #'djula:render-template* template stream (list* :foo 'some-value args)))


File: djula.info,  Node: Tags,  Next: Comments,  Prev: Variables,  Up: Top

5 Tags
******

* Menu:

* Overview::
* List of tags::
* Custom tags::


File: djula.info,  Node: Overview,  Next: List of tags,  Up: Tags

5.1 Overview
============

Tags look like this: '{% tag %}'.  Tags are more complex than variables:
Some create text in the output, some control flow by performing loops or
logic, and some load external information into the template to be used
by later variables.

   Some tags require beginning and ending tags (i.e.  '{% tag %} ... tag
contents ... {% endtag %}').

   Here are some of the more commonly used tags:

'for'

     Loop over each item in an array.  For example, to display a list of
     athletes provided in 'athlete-list':

     <ul>
     {% for athlete in athlete-list %}
         <li>{{ athlete.name }}</li>
     {% endfor %}
     </ul>

'if', 'else'

     Evaluates a variable, and if that variable is "true" the contents
     of the block are displayed:

     {% if athlete-list %}
         Number of athletes: {{ athlete-list|length }}
     {% else %}
         No athletes.
     {% endif %}

'block' and 'extends'

     Set up *note template inheritance: #template-inheritance. (see
     below), a powerful way of cutting down on "boilerplate" in
     templates.


File: djula.info,  Node: List of tags,  Next: Custom tags,  Prev: Overview,  Up: Tags

5.2 List of tags
================

Tags block

* Menu:

* block::
* extends::
* super::
* comment::
* cycle::
* debug::
* filter::
* firstof::
* for::
* if::
* Boolean operators::
* ifchanged::
* ifequal::
* ifnotequal::
* include::


File: djula.info,  Node: block,  Next: extends,  Up: List of tags

5.2.1 block
-----------

Defines a block that can be overridden by child templates.

   Sample usage:

{% block stylesheets %}
   ...
{% endblock %}

   See 'Template inheritance' for more information.

   extends


File: djula.info,  Node: extends,  Next: super,  Prev: block,  Up: List of tags

5.2.2 extends
-------------

Extends a template

   Sample usage:

{% extends "base.html" %}

   super


File: djula.info,  Node: super,  Next: comment,  Prev: extends,  Up: List of tags

5.2.3 super
-----------

Gets the content of the block from the parent template.  You can pass
the name of the block of the parent block you want to access.  If no
name is passed, then the current block's parent is used.

   Sample usage:

{% super "stylesheets" %}

{% block stylesheets %}
  {% super %}
{% endblock %}

   comment


File: djula.info,  Node: comment,  Next: cycle,  Prev: super,  Up: List of tags

5.2.4 comment
-------------

Ignores everything between '{% comment %}' and '{% endcomment %}'.  An
optional note may be inserted in the first tag.  For example, this is
useful when commenting out code for documenting why the code was
disabled.

   Sample usage:

<p>Rendered text with {{ pub-date|date }}</p>
{% comment "Optional note" %}
    <p>Commented out text with {{ create-date|date }}</p>
{% endcomment %}

   'comment' tags cannot be nested.

   cycle


File: djula.info,  Node: cycle,  Next: debug,  Prev: comment,  Up: List of tags

5.2.5 cycle
-----------

Produces one of its arguments each time this tag is encountered.  The
first argument is produced on the first encounter, the second argument
on the second encounter, and so forth.  Once all arguments are
exhausted, the tag cycles to the first argument and produces it again.

   This tag is particularly useful in a loop:

{% for o in some-list %}
    <tr class="{% cycle "row1" "row2" %}">
        ...
    </tr>
{% endfor %}

   The first iteration produces HTML that refers to class 'row1', the
second to 'row2', the third to 'row1' again, and so on for each
iteration of the loop.

   You can use variables, too.  For example, if you have two template
variables, 'rowvalue1' and 'rowvalue2', you can alternate between their
values like this:

{% for o in some-list %}
    <tr class="{% cycle rowvalue1 rowvalue2 %}">
        ...
    </tr>
{% endfor %}

   You can mix variables and strings:

{% for o in some-list %}
    <tr class="{% cycle "row1" rowvalue2 "row3" %}">
        ...
    </tr>
{% endfor %}

   You can use any number of values in a 'cycle' tag, separated by
spaces.  Values enclosed in double quotes ('"') are treated as string
literals, while values without quotes are treated as template variables.

   debug


File: djula.info,  Node: debug,  Next: filter,  Prev: cycle,  Up: List of tags

5.2.6 debug
-----------

Outputs a whole load of debugging information

   filter


File: djula.info,  Node: filter,  Next: firstof,  Prev: debug,  Up: List of tags

5.2.7 filter
------------

Filters the contents of the block through one or more filters.  Multiple
filters can be specified with pipes and filters can have arguments, just
as in variable syntax.

   Note that the block includes _all_ the text between the 'filter' and
'endfilter' tags.

   Sample usage:

{% filter force-escape|lower %}
    This text will be HTML-escaped, and will appear in all lowercase.
{% endfilter %}

   Note The 'escape' and 'safe' filters are not acceptable arguments.
Instead, use the 'autoescape' tag to manage autoescaping for blocks of
template code.  firstof


File: djula.info,  Node: firstof,  Next: for,  Prev: filter,  Up: List of tags

5.2.8 firstof
-------------

Outputs the first argument variable that is not 'False'.  Outputs
nothing if all the passed variables are 'False'.

   Sample usage:

{% firstof var1 var2 var3 %}

   You can also use a literal string as a fallback value in case all
passed variables are False:

{% firstof var1 var2 var3 "fallback value" %}

   for


File: djula.info,  Node: for,  Next: if,  Prev: firstof,  Up: List of tags

5.2.9 for
---------

Loops over each item in an array, making the item available in a context
variable.  For example, to display a list of athletes provided in
'athlete-list':

<ul>
{% for athlete in athlete-list %}
    <li>{{ athlete.name }}</li>
{% endfor %}
</ul>

   If you need to loop over an association list, you can unpack the
values in each sublist into individual variables.  For example, if your
context contains a list of (x .  y) coordinates called 'points', you
could use the following to output the list of points:

{% for (x . y) in points %}
    There is a point at {{ x }},{{ y }}
{% endfor %}

   This can also be useful if you need to access the items in a
hash-table.  For example, if your context contained a hash-table named
'data', the following would display the keys and values of the
hash-table:

{% for (key . value) in data.items %}
    {{ key }}: {{ value }}
{% endfor %}

   The for loop sets a number of variables available within the loop:

Variable                Description
-----------------------------------------------------------------------------------------
'forloop.counter'       The current iteration of the loop (1-indexed)
'forloop.counter0'      The current iteration of the loop (0-indexed)
'forloop.revcounter'    The number of iterations from the end of the loop (1-indexed)
'forloop.revcounter0'   The number of iterations from the end of the loop (0-indexed)
'forloop.first'         True if this is the first time through the loop
'forloop.last'          True if this is the last time through the loop
'forloop.parentloop'    For nested loops, this is the loop surrounding the current one

   if


File: djula.info,  Node: if,  Next: Boolean operators,  Prev: for,  Up: List of tags

5.2.10 if
---------

The '{% if %}' tag evaluates a variable, and if that variable is "true"
(i.e.  exists, is not empty, and is not a false boolean value) the
contents of the block are output:

{% if athlete-list %}
    Number of athletes: {{ athlete-list|length }}
{% else %}
    No athletes.
{% endif %}

   In the above, if 'athlete-list' is not empty, the number of athletes
will be displayed by the '{{ athlete-list|length }}' variable.


File: djula.info,  Node: Boolean operators,  Next: ifchanged,  Prev: if,  Up: List of tags

5.2.11 Boolean operators
------------------------

'if' tags may use 'and', 'or' or 'not' to test a number of variables or
to negate a given variable:

{% if athlete-list and coach-list %}
    Both athletes and coaches are available.
{% endif %}

{% if not athlete-list %}
    There are no athletes.
{% endif %}

{% if athlete-list or coach-list %}
    There are some athletes or some coaches.
{% endif %}

{% if not athlete-list or coach-list %}
    There are no athletes or there are some coaches (OK, so
    writing English translations of boolean logic sounds
    stupid; it's not our fault).
{% endif %}

{% if athlete-list and not coach-list %}
    There are some athletes and absolutely no coaches.
{% endif %}

   Use of both 'and' and 'or' clauses within the same tag is allowed,
with 'and' having higher precedence than 'or' e.g.:

{% if athlete-list and coach-list or cheerleader-list %}

   will be interpreted like:

(if (or (athlete-list and coach-list) cheerleader-list) ..)

   Use of actual parentheses in the 'if' tag is invalid syntax.  If you
need them to indicate precedence, you should use nested 'if' tags.

   ifchanged


File: djula.info,  Node: ifchanged,  Next: ifequal,  Prev: Boolean operators,  Up: List of tags

5.2.12 ifchanged
----------------

Check if a value has changed from the last iteration of a loop.

   The '{% ifchanged %}' block tag is used within a loop.

   If given one or more variables, check whether any variable has
changed.

   For example, the following shows the date every time it changes,
while showing the hour if either the hour or the date has changed:

{% for date in days %}
    {% ifchanged date.date %} {{ date.date }} {% endifchanged %}
    {% ifchanged date.hour date.date %}
        {{ date.hour }}
    {% endifchanged %}
{% endfor %}

   The 'ifchanged' tag can also take an optional '{% else %}' clause
that will be displayed if the value has not changed:

{% for match in matches %}
    <div style="background-color:
        {% ifchanged match.ballot-id %}
            {% cycle "red" "blue" %}
        {% else %}
            gray
        {% endifchanged %}
    ">{{ match }}</div>
{% endfor %}

   ifequal


File: djula.info,  Node: ifequal,  Next: ifnotequal,  Prev: ifchanged,  Up: List of tags

5.2.13 ifequal
--------------

Output the contents of the block if the two arguments equal each other.

   Example:

{% ifequal user.pk comment.user-id %}
    ...
{% endifequal %}

   As in the 'if' tag, an '{% else %}' clause is optional.

   The arguments can be hard-coded strings, so the following is valid:

{% ifequal user.username "adrian" %}
    ...
{% endifequal %}

   An alternative to the 'ifequal' tag is to use the 'if' tag and the
'==' operator.

   ifnotequal


File: djula.info,  Node: ifnotequal,  Next: include,  Prev: ifequal,  Up: List of tags

5.2.14 ifnotequal
-----------------

Just like 'ifequal', except it tests that the two arguments are not
equal.

   An alternative to the 'ifnotequal' tag is to use the 'if' tag and the
'!=' operator.

   include


File: djula.info,  Node: include,  Prev: ifnotequal,  Up: List of tags

5.2.15 include
--------------

Loads a template and renders it with the current context.  This is a way
of "including" other templates within a template.

   The template name can either be a variable or a hard-coded (quoted)
string, in either single or double quotes.

   This example includes the contents of the template '"foo/bar.html"':

{% include "foo/bar.html" %}

   A set of parameters can also be added, which become available as
context variables when the included template is rendered:

{% include "user.html" :user record.creator %}
{% include "user.html" :user record.updater %}


File: djula.info,  Node: Custom tags,  Prev: List of tags,  Up: Tags

5.3 Custom tags
===============

TODO


File: djula.info,  Node: Comments,  Next: Verbatim,  Prev: Tags,  Up: Top

6 Comments
**********

To comment-out part of a line in a template, use the comment syntax: '{#
#}'.

   For example, this template would render as ''hello'':

{# greeting #}hello

   A comment can contain any template code, invalid or not.  For
example:

{# {% if foo %}bar{% else %} #}

   If you need to comment out a multiline portion of the template, see
the 'comment' tag.


File: djula.info,  Node: Verbatim,  Next: Filters,  Prev: Comments,  Up: Top

7 Verbatim
**********

If you want to leave some portion of text unprocessed by Djula, use the
verbatim syntax: '{$ $}'.

   For example, this template would render as ''this is {{verbatim}}'':

{$ this is {{verbatim}} $}


File: djula.info,  Node: Filters,  Next: Template inheritance,  Prev: Verbatim,  Up: Top

8 Filters
*********

* Menu:

* Overview of filters::
* List of filters::
* Custom filters::


File: djula.info,  Node: Overview of filters,  Next: List of filters,  Up: Filters

8.1 Overview of filters
=======================

You can modify variables for display by using *filters*.

   Filters look like this: '{{ name|lower }}'.  This displays the value
of the '{{ name }}' variable after being filtered through the 'lower'
filter, which converts text to lowercase.  Use a pipe ('|') to apply a
filter.

   Filters can be "chained."  The output of one filter is applied to the
next.  '{{ text|escape|linebreaks }}' is a common idiom for escaping
text contents, then converting line breaks to '<p>' tags.

   Some filters take arguments.  A filter argument looks like this: '{{
bio|truncatewords:30 }}'.  This will display the first 30 words of the
'bio' variable.

   Filter arguments that contain spaces must be quoted; for example, to
join a list with commas and spaced you'd use '{{ list|join:", " }}'.

   Djula provides about thirty built-in template filters.  You can read
all about them in the 'built-in filter reference
<ref-templates-builtins-filters>'.  To give you a taste of what's
available, here are some of the more commonly used template filters:


File: djula.info,  Node: List of filters,  Next: Custom filters,  Prev: Overview of filters,  Up: Filters

8.2 List of filters
===================

Filters add

* Menu:

* add::
* addslashes::
* capfirst::
* cut::
* date::
* time::
* datetime::
* default::
* reverse::
* divisibleby::
* sort::
* first::
* join::
* last::
* length::
* length_is::
* linebreaks::
* linebreaksbr::
* lower::
* make_list::
* safe escape::
* slice::
* force-escape::
* format::
* replace  with::
* rest::
* scan::
* time::
* truncatechars::
* upper::
* urlencode::
* escape::
* escapejs::
* filesizeformat::


File: djula.info,  Node: add,  Next: addslashes,  Up: List of filters

8.2.1 add
---------

Adds the argument to the value.

   For example:

{{ value|add:2 }}

   If 'value' is '4', then the output will be '6'.

   addslashes


File: djula.info,  Node: addslashes,  Next: capfirst,  Prev: add,  Up: List of filters

8.2.2 addslashes
----------------

Adds slashes before quotes.  Useful for escaping strings in CSV, for
example.

   For example:

{{ value|addslashes }}

   If 'value' is '"I'm using Djula"', the output will be '"I\'m using
Djula"'.

   capfirst


File: djula.info,  Node: capfirst,  Next: cut,  Prev: addslashes,  Up: List of filters

8.2.3 capfirst
--------------

Capitalizes the first character of the value.  If the first character is
not a letter, this filter has no effect.

   For example:

{{ value|capfirst }}

   If 'value' is '"djula"', the output will be '"Djula"'.

   center cut


File: djula.info,  Node: cut,  Next: date,  Prev: capfirst,  Up: List of filters

8.2.4 cut
---------

Removes all values of arg from the given string.

   For example:

{{ value|cut:" " }}

   If 'value' is '"String with spaces"', the output will be
'"Stringwithspaces"'.

   date


File: djula.info,  Node: date,  Next: datetime,  Prev: cut,  Up: List of filters

8.2.5 date
----------

Formats a date

Example::

     {{ date-today | date }}

   A LOCAL-TIME format spec can be provided:

(defvar timestamp 3752179200)
{{ timestamp | date:(:year "/" (:month 2) "/" (:day 2)) }} ;; shows 2018/11/26


File: djula.info,  Node: datetime,  Next: default,  Prev: date,  Up: List of filters

8.2.6 datetime
--------------

Formats a date and time

   Example:

{{ time-now | datetime }}

   default


File: djula.info,  Node: default,  Next: reverse,  Prev: datetime,  Up: List of filters

8.2.7 default
-------------

If value evaluates to 'False', uses the given default.  Otherwise, uses
the value.

   For example:

{{ value|default "nothing" }}

   If 'value' is '""' (the empty string), the output will be 'nothing'.

   default_if_none reverse


File: djula.info,  Node: reverse,  Next: divisibleby,  Prev: default,  Up: List of filters

8.2.8 reverse
-------------

Takes a list and returns that list reversed.

   For example:

{{ list | reverse }}


File: djula.info,  Node: divisibleby,  Next: sort,  Prev: reverse,  Up: List of filters

8.2.9 divisibleby
-----------------

Returns 'True' if the value is divisible by the argument.

   For example:

{{ value|divisibleby:"3" }}

   If 'value' is '21', the output would be 'True'.

   sort


File: djula.info,  Node: sort,  Next: escape,  Prev: divisibleby,  Up: List of filters

8.2.10 sort
-----------

Takes a list and returns that list sorted.

   For example:

{{ list | sort }}

   escape


File: djula.info,  Node: escape,  Next: escapejs,  Prev: sort,  Up: List of filters

8.2.11 escape
-------------

Escapes a string's HTML. Specifically, it makes these replacements:

   * '<' is converted to '&lt;'
   * '>' is converted to '&gt;'
   * ''' (single quote) is converted to '&#39;'
   * '"' (double quote) is converted to '&quot;'
   * '&' is converted to '&amp;'

   The escaping is only applied when the string is output, so it does
not matter where in a chained sequence of filters you put 'escape': it
will always be applied as though it were the last filter.  If you want
escaping to be applied immediately, use the 'force-escape' filter.

   Applying 'escape' to a variable that would normally have
auto-escaping applied to the result will only result in one round of
escaping being done.  So it is safe to use this function even in
auto-escaping environments.  If you want multiple escaping passes to be
applied, use the 'force-escape' filter.

   For example, you can apply 'escape' to fields when 'autoescape' is
off:

{% autoescape off %}
{{ title|escape }}
{% endautoescape %}

   escapejs


File: djula.info,  Node: escapejs,  Next: filesizeformat,  Prev: escape,  Up: List of filters

8.2.12 escapejs
---------------

Escapes characters for use in JavaScript strings.  This does _not_ make
the string safe for use in HTML, but does protect you from syntax errors
when using templates to generate JavaScript/JSON.

   For example:

{{ value|escapejs }}

   If 'value' is '"testing\r\njavascript \'string" <b>escaping</b>"',
the output will be '"testing\\u000D\\u000Ajavascript
\\u0027string\\u0022 \\u003Cb\\u003Eescaping\\u003C/b\\u003E"'.

   filesizeformat


File: djula.info,  Node: filesizeformat,  Next: first,  Prev: escapejs,  Up: List of filters

8.2.13 filesizeformat
---------------------

Formats the value like a 'human-readable' file size (i.e.  ''13 KB'',
''4.1 MB'', ''102 bytes'', etc).

   For example:

{{ value|filesizeformat }}

   If 'value' is 123456789, the output would be '117.7 MB'.

   File sizes and SI units

   Strictly speaking, 'filesizeformat' does not conform to the
International System of Units which recommends using KiB, MiB, GiB, etc.
when byte sizes are calculated in powers of 1024 (which is the case
here).  Instead, Djula uses traditional unit names (KB, MB, GB, etc.)
corresponding to names that are more commonly used.  first


File: djula.info,  Node: first,  Next: join,  Prev: filesizeformat,  Up: List of filters

8.2.14 first
------------

Returns the first item in a list.

   For example:

{{ value|first }}

   If 'value' is the list '("a" "b" "c")', the output will be '"a"'.

   join


File: djula.info,  Node: join,  Next: last,  Prev: first,  Up: List of filters

8.2.15 join
-----------

Joins a list with a string.

   For example:

{{ value|join:" // " }}

   If 'value' is the list '("a" "b" "c")', the output will be the string
'"a // b // c"'.

   last


File: djula.info,  Node: last,  Next: length,  Prev: join,  Up: List of filters

8.2.16 last
-----------

Returns the last item in a list.

   For example:

{{ value|last }}

   If 'value' is the list '("a" "b" "c" "d")', the output will be the
string '"d"'.

   length


File: djula.info,  Node: length,  Next: length_is,  Prev: last,  Up: List of filters

8.2.17 length
-------------

Returns the length of the value.  This works for both strings and lists.

   For example:

{{ value|length }}

   If 'value' is '("a" "b" "c" "d")' or '"abcd"', the output will be
'4'.

   length_is


File: djula.info,  Node: length_is,  Next: linebreaks,  Prev: length,  Up: List of filters

8.2.18 length_is
----------------

Returns 'True' if the value's length is the argument, or 'False'
otherwise.

   For example:

{{ value|length_is:"4" }}

   If 'value' is '['a', 'b', 'c', 'd']' or '"abcd"', the output will be
'True'.

     linebreaks


File: djula.info,  Node: linebreaks,  Next: linebreaksbr,  Prev: length_is,  Up: List of filters

8.2.19 linebreaks
-----------------

Replaces line breaks in plain text with appropriate HTML; a single
newline becomes an HTML line break ('<br />') and a new line followed by
a blank line becomes a paragraph break ('</p>').

   For example:

{{ value|linebreaks }}

   If 'value' is 'Joel\nis a slug', the output will be '<p>Joel<br />is
a slug</p>'.

   linebreaksbr


File: djula.info,  Node: linebreaksbr,  Next: lower,  Prev: linebreaks,  Up: List of filters

8.2.20 linebreaksbr
-------------------

Converts all newlines in a piece of plain text to HTML line breaks ('<br
/>').

   For example:

{{ value|linebreaksbr }}

   If 'value' is 'Joel\nis a slug', the output will be 'Joel<br />is a
slug'.

   linenumbers lower


File: djula.info,  Node: lower,  Next: make_list,  Prev: linebreaksbr,  Up: List of filters

8.2.21 lower
------------

Converts a string into all lowercase.

   For example:

{{ value|lower }}

   If 'value' is 'Still MAD At Yoko', the output will be 'still mad at
yoko'.

   make_list


File: djula.info,  Node: make_list,  Next: safe escape,  Prev: lower,  Up: List of filters

8.2.22 make_list
----------------

Returns the value turned into a list.  For a string, it's a list of
characters.  For an integer, the argument is cast into an unicode string
before creating a list.

   For example:

{{ value|make_list }}

   If 'value' is the string '"Joel"', the output would be the list
'['J', 'o', 'e', 'l']'.  If 'value' is '123', the output will be the
list '['1', '2', '3']'.

   safe


File: djula.info,  Node: safe escape,  Next: slice,  Prev: make_list,  Up: List of filters

8.2.23 safe, escape
-------------------

Marks a string as not requiring further HTML escaping prior to output.
When autoescaping is off, this filter has no effect.

   Note If you are chaining filters, a filter applied after 'safe' can
make the contents unsafe again.  For example, the following code prints
the variable as is, unescaped:

{{ var|safe|escape }}

   safeseq slice


File: djula.info,  Node: slice,  Next: force-escape,  Prev: safe escape,  Up: List of filters

8.2.24 slice
------------

Returns a slice of a sequence (i.e.  lists, vectors, strings)

   Uses the Common Lisp 'cl-slice' library.

   Syntax:

{{ seq | slice: slices }}

   Each 'slice' selects a subset of subscripts along the corresponding
axis.

   * A nonnegative integer selects the corresponding index, while a
     negative integer selects an index counting backwards from the last
     index:

     {{ list | slice: 4 }}

   if the list is '(1 2 3 4 5 6)' it will output '(5)'

   * '(start . end)' to select a range.  When 'end' is 'NIL', the last
index is included.  Each boundary is resolved according to the other
rules if applicable, so you can use negative integers:

{{ string | slice: (0 . 5) }}
{{ string | slice: (5 . nil) }}

   if the string is '"Hello world"' is will output 'Hello' and 'world'.

   slugify force-escape


File: djula.info,  Node: force-escape,  Next: format,  Prev: slice,  Up: List of filters

8.2.25 force-escape
-------------------

Forces escaping HTML characters ('<, >, ', \, &'):

{{ value | force-escape }}

   It calls 'djula::escape-for-html'.

   format


File: djula.info,  Node: format,  Next: replace with,  Prev: force-escape,  Up: List of filters

8.2.26 format
-------------

Formats the variable according to the argument, a string formatting
specifier.  This specifier uses Common Lisp string formatting syntax

   For example:

{{ value | format:"~:d" }}

   If 'value' is '1000000', the output will be '1,000,000'.

   striptags


File: djula.info,  Node: replace with,  Next: rest,  Prev: format,  Up: List of filters

8.2.27 replace ... with
-----------------------

The 'replace' and the 'with' filters work together:

{{ value | replace:regexp | with:string }}

   This will replace all occurences of the regexp in "value" with a new
string, using 'ppcre:regex-replace-all'.

   rest


File: djula.info,  Node: rest,  Next: scan,  Prev: replace with,  Up: List of filters

8.2.28 rest
-----------

Returns the 'rest' of a list (aka 'cdr').

   For example:

{{ values|rest }}

   If 'values' is the list '("a" "b" "c")', the output will be '("b"
"c")'.

   scan


File: djula.info,  Node: scan,  Next: time,  Prev: rest,  Up: List of filters

8.2.29 scan
-----------

Extracts and displays a regexp from the value:

{{ value | scan:regexp }}

   This will display only the text that matches the regexp (using
'ppcre:scan-to-strings').

   time


File: djula.info,  Node: time,  Next: truncatechars,  Prev: scan,  Up: List of filters

8.2.30 time
-----------

Formats a time according to the given format.

   For example:

{{ value | time }}

   truncatechars


File: djula.info,  Node: truncatechars,  Next: upper,  Prev: time,  Up: List of filters

8.2.31 truncatechars
--------------------

Truncates a string if it is longer than the specified number of
characters.  Truncated strings will end with the
:cl:symbol:_ELLISION-STRING_, which defaults to "...".

   *Argument:* Number of characters to truncate to

   For example:

{{ value|truncatechars:9 }}

   If 'value' is '"Joel is a slug"', the output will be '"Joel i..."'.

   truncatechars_html upper


File: djula.info,  Node: upper,  Next: urlencode,  Prev: truncatechars,  Up: List of filters

8.2.32 upper
------------

Converts a string into all uppercase.

   For example:

{{ value|upper }}

   If 'value' is '"Joel is a slug"', the output will be '"JOEL IS A
SLUG"'.

   urlencode


File: djula.info,  Node: urlencode,  Next: escape,  Prev: upper,  Up: List of filters

8.2.33 urlencode
----------------

Escapes a value for use in a URL.

   For example:

{{ value|urlencode }}

   If 'value' is '"http://www.example.org/foo?a=b&c=d"', the output will
be '"http%3A//www.example.org/foo%3Fa%3Db%26c%3Dd"'.

   An optional argument containing the characters which should not be
escaped can be provided.

   If not provided, the '/' character is assumed safe.  An empty string
can be provided when _all_ characters should be escaped.  For example:

{{ value|urlencode:"" }}

   If 'value' is '"http://www.example.org/"', the output will be
'"http%3A%2F%2Fwww.example.org%2F"'.


File: djula.info,  Node: Custom filters,  Prev: List of filters,  Up: Filters

8.3 Custom filters
==================

Use the 'def-filter' macro.  Its general form is:

(def-filter :myfilter-name (value arg)
   (body))

   It always takes the variable's value as argument, and it can have one
required or optional argument.  For example, this is how those built-in
filters are defined:

(def-filter :capfirst (val)
  (string-capitalize (princ-to-string val)))

   This is all there is to it.  Once written, you can use it in your
templates.  You can define a filter wherever you want and there is no
need to register it or to import it in your templates.

   Here's a filter with a required argument:

(def-filter :add (it n)
  (+ it (parse-integer n)))

   and with an optional one:

(def-filter :datetime (it &optional format)
  (let ((timestamp …))))

   When you need to pass a second argument, make your filter return a
lambda function and chain it with the 'with' filter:

(def-filter :replace (it regex)
   (lambda (replace)
     (ppcre:regex-replace-all regex it replace)))

(def-filter :with (it replace)
   (funcall it replace))

   Now we can write:

{{ value | replace:foo | with:bar }}

   Errors are handled by the macro, but you can handle them and return a
'template-error' condition:

(def-filter :handle-error-filter (it)
   (handler-case
         (do-something)
     (condition (e)
       (template-error "There was an error executing this filter: ~A" e))))


File: djula.info,  Node: Template inheritance,  Next: Internationalization,  Prev: Filters,  Up: Top

9 Template inheritance
**********************

The most powerful - and thus the most complex - part of Djula's template
engine is template inheritance.  Template inheritance allows you to
build a base "skeleton" template that contains all the common elements
of your site and defines *blocks* that child templates can override.

   It's easiest to understand template inheritance by starting with an
example:

<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="style.css" />
    <title>{% block title %}My amazing site{% endblock %}</title>
</head>

<body>
    <div id="sidebar">
        {% block sidebar %}
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/blog/">Blog</a></li>
        </ul>
        {% endblock %}
    </div>

    <div id="content">
        {% block content %}{% endblock %}
    </div>
</body>
</html>

   This template, which we'll call 'base.html', defines a simple HTML
skeleton document that you might use for a simple two-column page.  It's
the job of "child" templates to fill the empty blocks with content.

   In this example, the 'block' tag defines three blocks that child
templates can fill in.  All the 'block' tag does is to tell the template
engine that a child template may override those portions of the
template.

   A child template might look like this:

{% extends "base.html" %}

{% block title %}My amazing blog{% endblock %}

{% block content %}
{% for entry in blog_entries %}
    <h2>{{ entry.title }}</h2>
    <p>{{ entry.body }}</p>
{% endfor %}
{% endblock %}

   The 'extends' tag is the key here.  It tells the template engine that
this template "extends" another template.  When the template system
evaluates this template, first it locates the parent - in this case,
"base.html".

   At that point, the template engine will notice the three 'block' tags
in 'base.html' and replace those blocks with the contents of the child
template.  Depending on the value of 'blog_entries', the output might
look like:

<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="style.css" />
    <title>My amazing blog</title>
</head>

<body>
    <div id="sidebar">
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/blog/">Blog</a></li>
        </ul>
    </div>

    <div id="content">
        <h2>Entry one</h2>
        <p>This is my first entry.</p>

        <h2>Entry two</h2>
        <p>This is my second entry.</p>
    </div>
</body>
</html>

   Note that since the child template didn't define the 'sidebar' block,
the value from the parent template is used instead.  Content within a
'{% block %}' tag in a parent template is always used as a fallback.

   You can use as many levels of inheritance as needed.  One common way
of using inheritance is the following three-level approach:

   * Create a 'base.html' template that holds the main look-and-feel of
     your site.
   * Create a 'base_SECTIONNAME.html' template for each "section" of
     your site.  For example, 'base_news.html', 'base_sports.html'.
     These templates all extend 'base.html' and include section-specific
     styles/design.
   * Create individual templates for each type of page, such as a news
     article or blog entry.  These templates extend the appropriate
     section template.

   This approach maximizes code reuse and makes it easy to add items to
shared content areas, such as section-wide navigation.

   Here are some tips for working with inheritance:

   * If you use '{% extends %}<extends>' in a template, it must be the
     first template tag in that template.  Template inheritance won't
     work, otherwise.
   * More '{% block %}<block>' tags in your base templates are better.
     Remember, child templates don't have to define all parent blocks,
     so you can fill in reasonable defaults in a number of blocks, then
     only define the ones you need later.  It's better to have more
     hooks than fewer hooks.
   * If you find yourself duplicating content in a number of templates,
     it probably means you should move that content to a '{% block %}'
     in a parent template.
   * If you need to get the content of the block from the parent
     template, the '{{ block.super }}' variable will do the trick.  This
     is useful if you want to add to the contents of a parent block
     instead of completely overriding it.  Data inserted using '{{
     block.super }}' will not be automatically escaped (see the next
     section), since it was already escaped, if necessary, in the parent
     template.
   * For extra readability, you can optionally give a _name_ to your '{%
     endblock %}' tag.  For example:

     {% block content %}
     ...
     {% endblock content %}

     In larger templates, this technique helps you see which '{% block
     %}' tags are being closed.

   Finally, note that you can't define multiple 'block' tags with the
same name in the same template.  This limitation exists because a block
tag works in "both" directions.  That is, a block tag doesn't just
provide a hole to fill -it also defines the content that fills the hole
in the _parent_.  If there were two similarly-named 'block' tags in a
template, that template's parent wouldn't know which one of the blocks'
content to use.


File: djula.info,  Node: Internationalization,  Next: Error handling,  Prev: Template inheritance,  Up: Top

10 Internationalization
***********************

* Menu:

* Syntax::
* Internationalization tags::
* Internationalization filters::
* Choosing language::
* Backends::


File: djula.info,  Node: Syntax,  Next: Internationalization tags,  Up: Internationalization

10.1 Syntax
===========

The easiest way to translate a string or variable is to enclose it
between '{_' and '_}':

{_ var _}
{_ "hello" _}


File: djula.info,  Node: Internationalization tags,  Next: Internationalization filters,  Prev: Syntax,  Up: Internationalization

10.2 Internationalization tags
==============================

trans

* Menu:

* trans::


File: djula.info,  Node: Internationalization filters,  Next: Choosing language,  Prev: Internationalization tags,  Up: Internationalization

10.3 Internationalization filters
=================================

urlencode

* Menu:

* trans::


File: djula.info,  Node: trans,  Up: Internationalization filters

10.3.1 trans
------------

Translates a variable or string.

   For example:

{{ var | trans }}
{{ "my string" |  trans }}


File: djula.info,  Node: Choosing language,  Next: Backends,  Prev: Internationalization filters,  Up: Internationalization

10.4 Choosing language
======================

To choose the language to use, set the :cl'*CURRENT-LANGUAGE*' variable.

   For example:

(let ((djula:*current-language* :es))
   (djula:render-template* +translation.html+))


File: djula.info,  Node: Backends,  Prev: Choosing language,  Up: Internationalization

10.5 Backends
=============

Djula supports two backends for doing translations: cl-locale
(https://github.com/arielnetworks/cl-locale) and gettext
(https://github.com/copyleft/gettext)

   Please have a look at the demo and the documentation of those
packages to figure out how to use them.


File: djula.info,  Node: Error handling,  Next: Automatic HTML escaping,  Prev: Internationalization,  Up: Top

11 Error handling
*****************

Djula catches errors and barfs them to the template output by default.

   That is controlled via the :cl'*CATCH-TEMPLATE-ERRORS-P*'.  If
changed to 'NIL', then errors are not caught anymore and are debuggable
from the lisp listener.

   Djula provides more or less verbosity in template errors.  Verbosity
is controlled via the variable :cl'*VERBOSE-ERRORS-P*'.

   Also, there's a fancy page to display errors, which can be disabled
if desired.  That is controlled via the variable
:cl'*FANCY-ERROR-TEMPLATE-P*'

* Menu:

* Djula API::


File: djula.info,  Node: Djula API,  Up: Error handling

11.1 Djula API
==============

Djula external symbols documentation


File: djula.info,  Node: Automatic HTML escaping,  Next: Custom tag and filter libraries,  Prev: Error handling,  Up: Top

12 Automatic HTML escaping
**************************

When generating HTML from templates, there's always a risk that a
variable will include characters that affect the resulting HTML. For
example, consider this template fragment:

Hello, {{ name }}.

   At first, this seems like a harmless way to display a user's name,
but consider what would happen if the user entered their name as this:

<script>alert('hello')</script>

   With this name value, the template would be rendered as:

Hello, <script>alert('hello')</script>

   ...which means the browser would pop-up a JavaScript alert box!

   Similarly, what if the name contained a ''<'' symbol, like this?

<b>username

   That would result in a rendered template like this:

Hello, <b>username

   ...which, in turn, would result in the remainder of the Web page
being bolded!

   Clearly, user-submitted data shouldn't be trusted blindly and
inserted directly into your Web pages, because a malicious user could
use this kind of hole to do potentially bad things.  This type of
security exploit is called a Cross Site Scripting
(http://en.wikipedia.org/wiki/Cross-site_scripting) (XSS) attack.

   To avoid this problem, you have two options:

   * One, you can make sure to run each untrusted variable through the
     'escape' filter (documented below), which converts potentially
     harmful HTML characters to unharmful ones.  This was the default
     solution in Django for its first few years, but the problem is that
     it puts the onus on _you_, the developer / template author, to
     ensure you're escaping everything.  It's easy to forget to escape
     data.
   * Two, you can take advantage of Django's automatic HTML escaping.
     The remainder of this section describes how auto-escaping works.

   By default in Django, every template automatically escapes the output
of every variable tag.  Specifically, these five characters are escaped:

   * '<' is converted to '&lt;'
   * '>' is converted to '&gt;'
   * ''' (single quote) is converted to '&#39;'
   * '"' (double quote) is converted to '&quot;'
   * '&' is converted to '&amp;'

   Again, we stress that this behavior is on by default.  If you're
using Django's template system, you're protected.

* Menu:

* How to turn it off::
* Notes::
* String literals and automatic escaping::


File: djula.info,  Node: How to turn it off,  Next: Notes,  Up: Automatic HTML escaping

12.1 How to turn it off
=======================

If you don't want data to be auto-escaped, on a per-site, per-template
level or per-variable level, you can turn it off in several ways.

   Why would you want to turn it off?  Because sometimes, template
variables contain data that you _intend_ to be rendered as raw HTML, in
which case you don't want their contents to be escaped.  For example,
you might store a blob of HTML in your database and want to embed that
directly into your template.  Or, you might be using Django's template
system to produce text that is _not_ HTML - like an email message, for
instance.

* Menu:

* For individual variables::


File: djula.info,  Node: For individual variables,  Up: How to turn it off

12.1.1 For individual variables
-------------------------------

To disable auto-escaping for an individual variable, use the 'safe'
filter:

This will be escaped: {{ data }}
This will not be escaped: {{ data|safe }}

   Think of _safe_ as shorthand for _safe from further escaping_ or _can
be safely interpreted as HTML_. In this example, if 'data' contains
''<b>'', the output will be:

This will be escaped: &lt;b&gt;
This will not be escaped: <b>

* Menu:

* For template blocks::


File: djula.info,  Node: For template blocks,  Up: For individual variables

12.1.1.1 For template blocks
............................

To control auto-escaping for a template, wrap the template (or just a
particular section of the template) in the 'autoescape' tag, like so:

{% autoescape off %}
    Hello {{ name }}
{% endautoescape %}

   The 'autoescape' tag takes either 'on' or 'off' as its argument.  At
times, you might want to force auto-escaping when it would otherwise be
disabled.  Here is an example template:

Auto-escaping is on by default. Hello {{ name }}

{% autoescape off %}
    This will not be auto-escaped: {{ data }}.

    Nor this: {{ other_data }}
    {% autoescape on %}
        Auto-escaping applies again: {{ name }}
    {% endautoescape %}
{% endautoescape %}

   The auto-escaping tag passes its effect onto templates that extend
the current one as well as templates included via the 'include' tag,
just like all block tags.  For example:

# base.html

{% autoescape off %}
<h1>{% block title %}{% endblock %}</h1>
{% block content %}
{% endblock %}
{% endautoescape %}


# child.html

{% extends "base.html" %}
{% block title %}This & that{% endblock %}
{% block content %}{{ greeting }}{% endblock %}

   Because auto-escaping is turned off in the base template, it will
also be turned off in the child template, resulting in the following
rendered HTML when the 'greeting' variable contains the string
'<b>Hello!</b>':

<h1>This & that</h1>
<b>Hello!</b>


File: djula.info,  Node: Notes,  Next: String literals and automatic escaping,  Prev: How to turn it off,  Up: Automatic HTML escaping

12.2 Notes
==========

Generally, template authors don't need to worry about auto-escaping very
much.  Developers on the Python side (people writing views and custom
filters) need to think about the cases in which data shouldn't be
escaped, and mark data appropriately, so things Just Work in the
template.

   If you're creating a template that might be used in situations where
you're not sure whether auto-escaping is enabled, then add an 'escape'
filter to any variable that needs escaping.  When auto-escaping is on,
there's no danger of the 'escape' filter _double-escaping_ data - the
'escape' filter does not affect auto-escaped variables.


File: djula.info,  Node: String literals and automatic escaping,  Prev: Notes,  Up: Automatic HTML escaping

12.3 String literals and automatic escaping
===========================================

As we mentioned earlier, filter arguments can be strings:

{{ data|default:"This is a string literal." }}

   All string literals are inserted *without* any automatic escaping
into the template - they act as if they were all passed through the
'safe' filter.  The reasoning behind this is that the template author is
in control of what goes into the string literal, so they can make sure
the text is correctly escaped when the template is written.

   This means you would write :

{{ data|default:"3 &lt; 2" }}

   ...rather than :

{{ data|default:"3 < 2" }}  <-- Bad! Don't do this.

   This doesn't affect what happens to data coming from the variable
itself.  The variable's contents are still automatically escaped, if
necessary, because they're beyond the control of the template author.


File: djula.info,  Node: Custom tag and filter libraries,  Next: Variable Index,  Prev: Automatic HTML escaping,  Up: Top

13 Custom tag and filter libraries
**********************************

Certain applications provide custom tag and filter libraries.  To access
them in a template, use the 'load' tag:

{% load comments %}

{% comment_form for blogs.entries entry.id with is_public yes %}

   In the above, the 'load' tag loads the 'comments' tag library, which
then makes the 'comment_form' tag available for use.  Consult the
documentation area in your admin to find the list of custom libraries in
your installation.

   The 'load' tag can take multiple library names, separated by spaces.
Example:

{% load comments i18n %}

   See '/howto/custom-template-tags' for information on writing your own
custom template libraries.

* Menu:

* Custom libraries and template inheritance::


File: djula.info,  Node: Custom libraries and template inheritance,  Up: Custom tag and filter libraries

13.1 Custom libraries and template inheritance
==============================================

When you load a custom tag or filter library, the tags/filters are only
made available to the current template - not any parent or child
templates along the template-inheritance path.

   For example, if a template 'foo.html' has '{% load comments %}', a
child template (e.g., one that has '{% extends "foo.html" %}') will
_not_ have access to the comments template tags and filters.  The child
template is responsible for its own '{% load comments %}'.

   This is a feature for the sake of maintainability and sanity.


File: djula.info,  Node: Variable Index,  Next: Function Index,  Prev: Custom tag and filter libraries,  Up: Top

Variable Index
**************

 [index ]
* Menu:

* djula:*current-store*:                 Usage.                 (line 6)


File: djula.info,  Node: Function Index,  Next: Concept Index,  Prev: Variable Index,  Up: Top

Function Index
**************

 [index ]
* Menu:

* djula:add-template-directory:          Usage.                 (line 6)
* djula:compile-template*:               Usage.                 (line 6)


File: djula.info,  Node: Concept Index,  Prev: Function Index,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* djula:                                 Top.                   (line 6)
* variables:                             Variables.             (line 6)



Tag Table:
Node: Top187
Node: Introduction559
Ref: #introduction668
Node: Prerequisites1776
Ref: #prerequisites1895
Node: Installation1948
Ref: #installation2065
Node: Basics2122
Ref: #basics2221
Node: Usage2900
Ref: #usage2994
Node: Auto-reload4042
Ref: #auto-reload4139
Node: API4310
Ref: #api4391
Node: Variables4391
Ref: #variables4491
Node: Default template variables5474
Ref: #default-template-variables5608
Node: Tags6342
Ref: #tags6435
Node: Overview6491
Ref: #overview6587
Node: List of tags7646
Ref: #list-of-tags7770
Node: block7969
Ref: #block8063
Node: extends8253
Ref: #extends8365
Node: super8440
Ref: #super8550
Node: comment8858
Ref: #comment8970
Node: cycle9404
Ref: #cycle9512
Node: debug10742
Ref: #debug10849
Node: filter10907
Ref: #filter11018
Node: firstof11582
Ref: #firstof11693
Node: for12010
Ref: #for12109
Node: if13739
Ref: #if13848
Node: Boolean operators14271
Ref: #boolean-operators14416
Node: ifchanged15510
Ref: #ifchanged15644
Node: ifequal16543
Ref: #ifequal16666
Node: ifnotequal17112
Ref: #ifnotequal17239
Node: include17416
Ref: #include17521
Node: Custom tags18085
Ref: #custom-tags18190
Node: Comments18196
Ref: #comments18296
Node: Verbatim18653
Ref: #verbatim18756
Node: Filters18956
Ref: #filters19069
Node: Overview of filters19142
Ref: #overview-119277
Node: List of filters20317
Ref: #list-of-filters20467
Node: add20907
Ref: #add21001
Node: addslashes21137
Ref: #addslashes21262
Node: capfirst21475
Ref: #capfirst21596
Node: cut21824
Ref: #cut21929
Node: date22109
Ref: #date22216
Node: datetime22429
Ref: #datetime22548
Node: default22625
Ref: #default22745
Node: reverse22978
Ref: #reverse23101
Node: divisibleby23186
Ref: #divisibleby23314
Node: sort23480
Ref: #sort23595
Node: escape23686
Ref: #escape23802
Node: escapejs24803
Ref: #escapejs24933
Node: filesizeformat25375
Ref: #filesizeformat25516
Node: first26088
Ref: #first26207
Node: join26357
Ref: #join26464
Node: last26635
Ref: #last26743
Node: length26908
Ref: #length27025
Node: length_is27225
Ref: #length_is27354
Node: linebreaks27573
Ref: #linebreaks27710
Node: linebreaksbr28044
Ref: #linebreaksbr28181
Node: lower28405
Ref: #lower28527
Node: make_list28695
Ref: #make_list28824
Node: safe escape29200
Ref: #safe-escape29335
Node: slice29676
Ref: #slice29800
Node: force-escape30619
Ref: #force-escape30752
Node: format30882
Ref: #format31010
Node: replace with31268
Ref: #replace-...-with31408
Node: rest31628
Ref: #rest31742
Node: scan31907
Ref: #scan32013
Node: time32190
Ref: #time-132305
Node: truncatechars32407
Ref: #truncatechars32541
Node: upper32909
Ref: #upper33032
Node: urlencode33198
Ref: #urlencode33322
Node: Custom filters33893
Ref: #custom-filters34013
Node: Template inheritance35375
Ref: #template-inheritance35526
Node: Internationalization40763
Ref: #internationalization40923
Node: Syntax41042
Ref: #syntax41163
Node: Internationalization tags41279
Ref: #tags-141475
Node: Internationalization filters41502
Ref: #filters-141715
Node: trans41746
Ref: #trans-141842
Node: Choosing language41939
Ref: #choosing-language42113
Node: Backends42291
Ref: #backends42410
Node: Error handling42674
Ref: #error-handling42825
Node: Djula API43364
Ref: #api-243454
Node: Automatic HTML escaping43492
Ref: #automatic-html-escaping43672
Node: How to turn it off45942
Ref: #how-to-turn-it-off46082
Node: For individual variables46692
Ref: #for-individual-variables46835
Node: For template blocks47256
Ref: #for-template-blocks47394
Node: Notes48749
Ref: #notes48910
Node: String literals and automatic escaping49536
Ref: #string-literals-and-automatic-escaping49736
Node: Custom tag and filter libraries50532
Ref: #custom-tag-and-filter-libraries50728
Node: Custom libraries and template inheritance51425
Ref: #custom-libraries-and-template-inheritance51628
Node: Variable Index52149
Node: Function Index52391
Node: Concept Index52688

End Tag Table


Local Variables:
coding: utf-8
End:
