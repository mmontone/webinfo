(:|node| (:|nodetitle| "Introduction" :|spaces| " " :|name| "Top")
 (:|nodename| NIL "Top") (:|nodenext| (:|automatic| "on") "Dictionary"))
(:|top| (:|spaces| " ") (:|sectiontitle| NIL "Introduction") "

"
 (:|para| NIL "This is an " (:|sc| NIL "sb-texinfo")
  " autogenerated manual for Djula.
")
 "
"
 "
"
 "
"
 "
"
 "

"
 (:|para| NIL "An implementation of Django templates for Common Lisp.
")
 "

"
 "
"
 "

"
 (:|macro| (:|line| " earmuffs{name}" :|name| "earmuffs")
  (:|formalarg| NIL "name") "*\\name\\*
")
 "
"
 (:|macro| (:|line| " setf{name}" :|name| "setf") (:|formalarg| NIL "name")
  "(setf \\name\\)
")
 "


"
 (:|macro| (:|line| " lw{word}" :|name| "lw") (:|formalarg| NIL "word") "@iftex
@tex
\\\\lw{\\word\\}%
@end tex
@end iftex
@ifnottex
\\word\\@c
@end ifnottex
")
 "

"
 (:|macro| (:|line| " refvar{name}" :|name| "refvar") (:|formalarg| NIL "name")
  "@ref{Variable \\name\\, @code{\\name\\}}
")
 "

"
 (:|macro| (:|line| " refmacro{name}" :|name| "refmacro")
  (:|formalarg| NIL "name") "@ref{Macro \\name\\, @code{\\name\\}}
")
 "

"
 (:|macro| (:|line| " reffun{name}" :|name| "reffun") (:|formalarg| NIL "name")
  "@ref{Function \\name\\, @code{\\name\\}}
")
 "
"
 (:|macro| (:|line| " djula{name}" :|name| "djula") (:|formalarg| NIL "name")
  "\\name\\ [djula]
")
 "
"
 (:|macro| (:|line| " nopkg{name}" :|name| "nopkg") (:|formalarg| NIL "name")
  "\\name\\ 
")
 "
"
 (:|menu| (:|endspaces| " ") "
"
  (:|menuentry| (:|leadingtext| "* ")
   (:|menunode| (:|separator| "::") "Dictionary")
   (:|menudescription| NIL
    (:|pre| (:|xml:space| "preserve") "
")))
  (:|menuentry| (:|leadingtext| "* ")
   (:|menunode| (:|separator| "::") "Function Index")
   (:|menudescription| NIL
    (:|pre| (:|xml:space| "preserve") "
")))
  (:|menuentry| (:|leadingtext| "* ")
   (:|menunode| (:|separator| "::") "Variable Index")
   (:|menudescription| NIL
    (:|pre| (:|xml:space| "preserve") "
")))
  (:|menuentry| (:|leadingtext| "* ")
   (:|menunode| (:|separator| "::") "Type Index")
   (:|menudescription| NIL
    (:|pre| (:|xml:space| "preserve") "
"))))
 "

")
(:|node| (:|nodetitle| "Dictionary" :|spaces| " " :|name| "Dictionary")
 (:|nodename| NIL "Dictionary")
 (:|nodenext| (:|automatic| "on") "Function Index")
 (:|nodeprev| (:|automatic| "on") "Top") (:|nodeup| (:|automatic| "on") "Top"))
(:|chapter| (:|spaces| " ") (:|sectiontitle| NIL "Dictionary") "

"
 (:|vindex| (:|spaces| " " :|index| "vr")
  (:|indexterm| (:|number| "1" :|index| "vr")
   "*catch-template-errors-p* [djula]"))
 "
"
 (:|anchor|
  (:|name| "Variable-djula_003a_002acatch_002dtemplate_002derrors_002dp_002a")
  "Variable djula:*catch-template-errors-p*")
 "
"
 (:|defvr| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "2" :|index| "vr")
    "*catch-template-errors-p* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Variable") " "
   (:|defvariable| (:|bracketed| "on") "*catch-template-errors-p* [djula]"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL
    "When enabled, caught errors during the rendering of the template are written to the output instead of being handled by the lisp listener
")))
 "
"
 (:|vindex| (:|spaces| " " :|index| "vr")
  (:|indexterm| (:|number| "3" :|index| "vr") "*current-store* [djula]"))
 "
"
 (:|anchor| (:|name| "Variable-djula_003a_002acurrent_002dstore_002a")
  "Variable djula:*current-store*")
 "
"
 (:|defvr| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "4" :|index| "vr") "*current-store* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Variable") " "
   (:|defvariable| (:|bracketed| "on") "*current-store* [djula]"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "The currently in-use template store.  Defaults to a "
    (:|code| NIL "file-store") ".
")))
 "
"
 (:|vindex| (:|spaces| " " :|index| "vr")
  (:|indexterm| (:|number| "5" :|index| "vr")
   "*default-template-arguments* [djula]"))
 "
"
 (:|anchor|
  (:|name| "Variable-djula_003a_002adefault_002dtemplate_002darguments_002a")
  "Variable djula:*default-template-arguments*")
 "
"
 (:|defvr| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "6" :|index| "vr")
    "*default-template-arguments* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Variable") " "
   (:|defvariable| (:|bracketed| "on") "*default-template-arguments* [djula]"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL
    "List of arguments available for all templates. Add arguments to this list if you want them to be available in every template.
This is a plist, so use getf to add arguments, like: (setf (getf djula:*default-template-arguments* :foo) ’some-value)
")))
 "
"
 (:|vindex| (:|spaces| " " :|index| "vr")
  (:|indexterm| (:|number| "7" :|index| "vr") "*djula-emptyp* [djula]"))
 "
"
 (:|anchor| (:|name| "Variable-djula_003a_002adjula_002demptyp_002a")
  "Variable djula:*djula-emptyp*")
 "
"
 (:|defvr| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "8" :|index| "vr") "*djula-emptyp* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Variable") " "
   (:|defvariable| (:|bracketed| "on") "*djula-emptyp* [djula]"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL
    "Change this to customize how djula decides if some value is empty or not
")))
 "
"
 (:|vindex| (:|spaces| " " :|index| "vr")
  (:|indexterm| (:|number| "9" :|index| "vr") "*elision-string* [djula]"))
 "
"
 (:|anchor| (:|name| "Variable-djula_003a_002aelision_002dstring_002a")
  "Variable djula:*elision-string*")
 "
"
 (:|defvr| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "10" :|index| "vr") "*elision-string* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Variable") " "
   (:|defvariable| (:|bracketed| "on") "*elision-string* [djula]"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL
    "The string to be used by ‘truncatechars’ at the end of truncated strings.
")))
 "
"
 (:|vindex| (:|spaces| " " :|index| "vr")
  (:|indexterm| (:|number| "11" :|index| "vr")
   "*fancy-error-template-p* [djula]"))
 "
"
 (:|anchor|
  (:|name| "Variable-djula_003a_002afancy_002derror_002dtemplate_002dp_002a")
  "Variable djula:*fancy-error-template-p*")
 "
"
 (:|defvr| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "12" :|index| "vr")
    "*fancy-error-template-p* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Variable") " "
   (:|defvariable| (:|bracketed| "on") "*fancy-error-template-p* [djula]"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "When enabled, show a fancy template when an error ocurrs
")))
 "
"
 (:|vindex| (:|spaces| " " :|index| "vr")
  (:|indexterm| (:|number| "13" :|index| "vr")
   "*translation-backend* [djula]"))
 "
"
 (:|anchor| (:|name| "Variable-djula_003a_002atranslation_002dbackend_002a")
  "Variable djula:*translation-backend*")
 "
"
 (:|defvr| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "14" :|index| "vr")
    "*translation-backend* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Variable") " "
   (:|defvariable| (:|bracketed| "on") "*translation-backend* [djula]"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "The translation backend. One of :locale, :gettext
")))
 "
"
 (:|vindex| (:|spaces| " " :|index| "vr")
  (:|indexterm| (:|number| "15" :|index| "vr") "*verbose-errors-p* [djula]"))
 "
"
 (:|anchor| (:|name| "Variable-djula_003a_002averbose_002derrors_002dp_002a")
  "Variable djula:*verbose-errors-p*")
 "
"
 (:|defvr| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "16" :|index| "vr") "*verbose-errors-p* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Variable") " "
   (:|defvariable| (:|bracketed| "on") "*verbose-errors-p* [djula]"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL
    "When enabled, errors are displayed more verbosely. Good for debugging
")))
 "
"
 (:|findex| (:|spaces| " " :|index| "fn")
  (:|indexterm| (:|number| "1" :|index| "fn")
   "add-template-directory [djula]"))
 "
"
 (:|anchor| (:|name| "Function-djula_003aadd_002dtemplate_002ddirectory")
  "Function djula:add-template-directory")
 "
"
 (:|deffn| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "2" :|index| "fn")
    "add-template-directory [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Function") " "
   (:|deffunction| (:|bracketed| "on") "add-template-directory [djula]") " "
   (:|defparam| NIL "directory") " " (:|defparam| NIL "&")
   (:|defparam| NIL "optional") " " (:|defparam| NIL "template-store"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "Adds " (:|code| NIL "directory") " to the search path of the "
    (:|code| NIL "template-store") "
")))
 "
"
 (:|findex| (:|spaces| " " :|index| "fn")
  (:|indexterm| (:|number| "3" :|index| "fn") "compile-template [djula]"))
 "
"
 (:|anchor| (:|name| "Generic_002dFunction-djula_003acompile_002dtemplate")
  "Generic-Function djula:compile-template")
 "
"
 (:|deffn| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "4" :|index| "fn") "compile-template [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Generic Function")
   " " (:|deffunction| (:|bracketed| "on") "compile-template [djula]") " "
   (:|defparam| NIL "compiler") " " (:|defparam| NIL "name") " "
   (:|defparam| NIL "&") (:|defparam| NIL "optional") " "
   (:|defparam| NIL "error-p"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "Provides a hook to customize template compilation.
")))
 "
"
 (:|tindex| (:|spaces| " " :|index| "tp")
  (:|indexterm| (:|number| "1" :|index| "tp") "file-store [djula]"))
 "
"
 (:|anchor| (:|name| "Class-djula_003afile_002dstore")
  "Class djula:file-store")
 "
"
 (:|deftp| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "2" :|index| "tp") "file-store [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Class") " "
   (:|defdatatype| (:|bracketed| "on") "file-store [djula]"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "Class precedence list: "
    (:|code| NIL "file-store, standard-object, t") "
")
   "
"
   (:|para| NIL "Slots:
")
   (:|itemize| (:|endspaces| " " :|commandarg| "bullet")
    (:|itemprepend| NIL "•") "
"
    (:|listitem| (:|spaces| " ") (:|prepend| NIL "•")
     (:|para| NIL (:|code| NIL "current-path") " — 
")
     "
"
     (:|para| NIL "The location of the most-recently fetched template.
"))
    (:|listitem| (:|spaces| " ") (:|prepend| NIL "•")
     (:|para| NIL (:|code| NIL "search-path") " — initarg: "
      (:|code| NIL (:|w| NIL ":search-path")) "; reader: "
      (:|code| NIL (:|w| NIL "djula::search-path")) "; writer: "
      (:|code| NIL (:|w| NIL "(setf djula::search-path)")) "
")
     "
"
     (:|para| NIL "User-provided list of template locations.
")))
   "

"
   (:|para| NIL
    "Searches for template files on disk according to the given search path.
")))
 "
"
 (:|vindex| (:|spaces| " " :|index| "vr")
  (:|indexterm| (:|number| "17" :|index| "vr") "*error-template* [djula]"))
 "
"
 (:|anchor| (:|name| "Variable-djula_003a_002aerror_002dtemplate_002a")
  "Variable djula:*error-template*")
 "
"
 (:|defvr| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "18" :|index| "vr") "*error-template* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Variable") " "
   (:|defvariable| (:|bracketed| "on") "*error-template* [djula]"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "The error template used by ‘render-error-template’.
")))
 "
"
 (:|vindex| (:|spaces| " " :|index| "vr")
  (:|indexterm| (:|number| "19" :|index| "vr") "*fancy-debug-p* [djula]"))
 "
"
 (:|anchor| (:|name| "Variable-djula_003a_002afancy_002ddebug_002dp_002a")
  "Variable djula:*fancy-debug-p*")
 "
"
 (:|defvr| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "20" :|index| "vr") "*fancy-debug-p* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Variable") " "
   (:|defvariable| (:|bracketed| "on") "*fancy-debug-p* [djula]"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL
    "When enabled, displays fancy html based debugging information for the {% debug %} tag
")))
 "
"
 (:|findex| (:|spaces| " " :|index| "fn")
  (:|indexterm| (:|number| "5" :|index| "fn") "compile-template* [djula]"))
 "
"
 (:|anchor| (:|name| "Function-djula_003acompile_002dtemplate_002a")
  "Function djula:compile-template*")
 "
"
 (:|deffn| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "6" :|index| "fn") "compile-template* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Function") " "
   (:|deffunction| (:|bracketed| "on") "compile-template* [djula]") " "
   (:|defparam| NIL "name"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "Compiles template " (:|code| NIL "name") " with compiler in "
    (:|code| NIL "*current-compiler*") "
")))
 "
"
 (:|findex| (:|spaces| " " :|index| "fn")
  (:|indexterm| (:|number| "7" :|index| "fn") "fetch-template [djula]"))
 "
"
 (:|anchor| (:|name| "Generic_002dFunction-djula_003afetch_002dtemplate")
  "Generic-Function djula:fetch-template")
 "
"
 (:|deffn| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "8" :|index| "fn") "fetch-template [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Generic Function")
   " " (:|deffunction| (:|bracketed| "on") "fetch-template [djula]") " "
   (:|defparam| NIL "store") " " (:|defparam| NIL "key"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "Return the text of the template identified by the given key.
")))
 "
"
 (:|findex| (:|spaces| " " :|index| "fn")
  (:|indexterm| (:|number| "9" :|index| "fn") "fetch-template* [djula]"))
 "
"
 (:|anchor| (:|name| "Function-djula_003afetch_002dtemplate_002a")
  "Function djula:fetch-template*")
 "
"
 (:|deffn| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "10" :|index| "fn") "fetch-template* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Function") " "
   (:|deffunction| (:|bracketed| "on") "fetch-template* [djula]") " "
   (:|defparam| NIL "key"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "Return the text of a template fetched from the "
    (:|code| NIL "*current-store*") ".
")))
 "
"
 (:|findex| (:|spaces| " " :|index| "fn")
  (:|indexterm| (:|number| "11" :|index| "fn") "find-template [djula]"))
 "
"
 (:|anchor| (:|name| "Generic_002dFunction-djula_003afind_002dtemplate")
  "Generic-Function djula:find-template")
 "
"
 (:|deffn| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "12" :|index| "fn") "find-template [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Generic Function")
   " " (:|deffunction| (:|bracketed| "on") "find-template [djula]") " "
   (:|defparam| NIL "store") " " (:|defparam| NIL "name") " "
   (:|defparam| NIL "&") (:|defparam| NIL "optional") " "
   (:|defparam| NIL "error-p"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL
    "Return a hashable key that uniquely identifies the named template.
")))
 "
"
 (:|anchor|
  (:|name|
   "Method-djula_003afind_002dtemplate-_0028_0028store-file_002dstore_0029-name-_0026optional-_0028error_002dp-t_0029_0029")
  "Method djula:find-template ((store file-store) name &optional (error-p t))")
 "
"
 (:|deffn| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "13" :|index| "fn") "find-template [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Method") " "
   (:|deffunction| (:|bracketed| "on") "find-template [djula]") " "
   (:|defdelimiter| NIL "(") (:|defparam| NIL "store") " "
   (:|defparam| NIL "file-store") (:|defdelimiter| NIL ")") " "
   (:|defparam| NIL "name") " " (:|defparam| NIL "&")
   (:|defparam| NIL "optional") " " (:|defdelimiter| NIL "(")
   (:|defparam| NIL "error-p") " " (:|defparam| NIL "t")
   (:|defdelimiter| NIL ")"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "Algorithm that finds a template in a file-store.
")))
 "
"
 (:|findex| (:|spaces| " " :|index| "fn")
  (:|indexterm| (:|number| "14" :|index| "fn") "render-template* [djula]"))
 "
"
 (:|anchor| (:|name| "Function-djula_003arender_002dtemplate_002a")
  "Function djula:render-template*")
 "
"
 (:|deffn| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "15" :|index| "fn") "render-template* [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Function") " "
   (:|deffunction| (:|bracketed| "on") "render-template* [djula]") " "
   (:|defparam| NIL "template") " " (:|defparam| NIL "&")
   (:|defparam| NIL "optional") " " (:|defparam| NIL "stream") " "
   (:|defparam| NIL "&") (:|defparam| NIL "rest") " "
   (:|defparam| NIL "*template-arguments*"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "Render " (:|code| NIL "template") " into "
    (:|code| NIL "stream") " passing " (:|code| NIL "*template-arguments*") "
")))
 "
"
 (:|findex| (:|spaces| " " :|index| "fn")
  (:|indexterm| (:|number| "16" :|index| "fn")
   "template-print-object [djula]"))
 "
"
 (:|anchor|
  (:|name| "Generic_002dFunction-djula_003atemplate_002dprint_002dobject")
  "Generic-Function djula:template-print-object")
 "
"
 (:|deffn| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "17" :|index| "fn")
    "template-print-object [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Generic Function")
   " " (:|deffunction| (:|bracketed| "on") "template-print-object [djula]") " "
   (:|defparam| NIL "object"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL
    "Print an object in a template. Customize this function to implement custom printers for your objects.
")))
 "
"
 (:|findex| (:|spaces| " " :|index| "fn")
  (:|indexterm| (:|number| "18" :|index| "fn") "url-encode [djula]"))
 "
"
 (:|anchor| (:|name| "Function-djula_003aurl_002dencode")
  "Function djula:url-encode")
 "
"
 (:|deffn| (:|endspaces| " " :|spaces| " ")
  (:|definitionterm| NIL
   (:|indexterm| (:|number| "19" :|index| "fn") "url-encode [djula]")
   (:|defcategory| (:|bracketed| "on" :|automatic| "off") "Function") " "
   (:|deffunction| (:|bracketed| "on") "url-encode [djula]") " "
   (:|defparam| NIL "string"))
  "
"
  (:|definitionitem| NIL
   (:|para| NIL "URL-encodes a string using the external format "
    (:|code| NIL "external-format") ".
")))
 "

")
(:|node| (:|nodetitle| "Function Index" :|spaces| " " :|name| "Function-Index")
 (:|nodename| NIL "Function Index")
 (:|nodenext| (:|automatic| "on") "Variable Index")
 (:|nodeprev| (:|automatic| "on") "Dictionary")
 (:|nodeup| (:|automatic| "on") "Top"))
(:|appendix| (:|spaces| " ") (:|sectiontitle| NIL "Function Index") "

"
 (:|printindex| (:|line| "fn" :|value| "fn")) "


")
(:|node| (:|nodetitle| "Variable Index" :|spaces| " " :|name| "Variable-Index")
 (:|nodename| NIL "Variable Index")
 (:|nodenext| (:|automatic| "on") "Type Index")
 (:|nodeprev| (:|automatic| "on") "Function Index")
 (:|nodeup| (:|automatic| "on") "Top"))
(:|appendix| (:|spaces| " ") (:|sectiontitle| NIL "Variable Index") "

"
 (:|printindex| (:|line| "vr" :|value| "vr")) "


")
(:|node| (:|nodetitle| "Type Index" :|spaces| " " :|name| "Type-Index")
 (:|nodename| NIL "Type Index")
 (:|nodeprev| (:|automatic| "on") "Variable Index")
 (:|nodeup| (:|automatic| "on") "Top"))
(:|appendix| (:|spaces| " ") (:|sectiontitle| NIL "Type Index") "

"
 (:|printindex| (:|line| "tp" :|value| "tp")) "

")
((:NODES ("Type-Index" . 19482) ("Variable-Index" . 19100)
  ("Function-Index" . 18718) ("Dictionary" . 2085) ("Top" . 0))
 (:INDEX (:CP)
  (:FN ("url-encode [djula]" . "Dictionary")
   ("template-print-object [djula]" . "Dictionary")
   ("render-template* [djula]" . "Dictionary")
   ("find-template [djula]" . "Dictionary")
   ("fetch-template* [djula]" . "Dictionary")
   ("fetch-template [djula]" . "Dictionary")
   ("compile-template* [djula]" . "Dictionary")
   ("compile-template [djula]" . "Dictionary")
   ("add-template-directory [djula]" . "Dictionary"))
  (:VR ("*fancy-debug-p* [djula]" . "Dictionary")
   ("*error-template* [djula]" . "Dictionary")
   ("*verbose-errors-p* [djula]" . "Dictionary")
   ("*translation-backend* [djula]" . "Dictionary")
   ("*fancy-error-template-p* [djula]" . "Dictionary")
   ("*elision-string* [djula]" . "Dictionary")
   ("*djula-emptyp* [djula]" . "Dictionary")
   ("*default-template-arguments* [djula]" . "Dictionary")
   ("*current-store* [djula]" . "Dictionary")
   ("*catch-template-errors-p* [djula]" . "Dictionary"))
  (:TP ("file-store [djula]" . "Dictionary"))))
WM 