<?xml version="1.0"?>
<!DOCTYPE texinfo PUBLIC "-//GNU//DTD TexinfoML V6.6//EN" "http://www.gnu.org/software/texinfo/dtd/6.6/texinfo.dtd">
<texinfo xml:lang="en">
<filename file="djula-ref.xml"></filename>
<preamble>
\input texinfo   @c -*-texinfo-*-
</preamble><!-- c %**start of header -->
<setfilename file="djula-ref.info" spaces=" ">djula-ref.info</setfilename>
<settitle spaces=" ">Djula</settitle>
<!-- c %**end of header -->

<!-- c for install-info -->
<dircategory spaces=" ">Software development</dircategory>
<direntry endspaces=" ">
<menuentry leadingtext="* "><menutitle separator=":           ">djula-ref</menutitle><menunode separator=".">An implementation of Django templates for Common Lisp</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></direntry>

<finalout></finalout>

<titlepage endspaces=" ">
<title spaces=" ">Djula</title>
<subtitle spaces=" ">An implementation of Django templates for Common Lisp.</subtitle>

</titlepage>

<contents></contents>

<node name="Top" spaces=" "><nodename>Top</nodename><nodenext automatic="on">Dictionary</nodenext></node>
<top spaces=" "><sectiontitle>Introduction</sectiontitle>

<para>This is an <sc>sb-texinfo</sc> autogenerated manual for Djula.
</para>
<!-- c DO NOT EDIT BY HAND -->
<!-- c -->
<!-- c ...unless you're just using this as a template for a manually maintained -->
<!-- c versiom, which is obviously OK. -->

<para>An implementation of Django templates for Common Lisp.
</para>

<!-- c MACHINE GENERATED FILE! Do not edit by hand! -->
<!-- c See SB-TEXINFO for details. -->

<macro name="earmuffs" line=" earmuffs{name}"><formalarg>name</formalarg>*\name\*
</macro>
<macro name="setf" line=" setf{name}"><formalarg>name</formalarg>(setf \name\)
</macro>


<macro name="lw" line=" lw{word}"><formalarg>word</formalarg>@iftex
@tex
\\lw{\word\}%
@end tex
@end iftex
@ifnottex
\word\@c
@end ifnottex
</macro>

<macro name="refvar" line=" refvar{name}"><formalarg>name</formalarg>@ref{Variable \name\, @code{\name\}}
</macro>

<macro name="refmacro" line=" refmacro{name}"><formalarg>name</formalarg>@ref{Macro \name\, @code{\name\}}
</macro>

<macro name="reffun" line=" reffun{name}"><formalarg>name</formalarg>@ref{Function \name\, @code{\name\}}
</macro>
<macro name="djula" line=" djula{name}"><formalarg>name</formalarg>\name\ [djula]
</macro>
<macro name="nopkg" line=" nopkg{name}"><formalarg>name</formalarg>\name\ 
</macro>
<menu endspaces=" ">
<menuentry leadingtext="* "><menunode separator="::">Dictionary</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Function Index</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Variable Index</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry><menuentry leadingtext="* "><menunode separator="::">Type Index</menunode><menudescription><pre xml:space="preserve">
</pre></menudescription></menuentry></menu>

</top>
<node name="Dictionary" spaces=" "><nodename>Dictionary</nodename><nodenext automatic="on">Function Index</nodenext><nodeprev automatic="on">Top</nodeprev><nodeup automatic="on">Top</nodeup></node>
<!-- comment  node-name,  next,  previous,  up -->
<chapter spaces=" "><sectiontitle>Dictionary</sectiontitle>

<vindex index="vr" spaces=" "><indexterm index="vr" number="1">*catch-template-errors-p* [djula]</indexterm></vindex>
<anchor name="Variable-djula_003a_002acatch_002dtemplate_002derrors_002dp_002a">Variable djula:*catch-template-errors-p*</anchor>
<defvr spaces=" " endspaces=" "><definitionterm><indexterm index="vr" number="2">*catch-template-errors-p* [djula]</indexterm><defcategory bracketed="on">Variable</defcategory> <defvariable bracketed="on">*catch-template-errors-p* [djula]</defvariable></definitionterm>
<definitionitem><para>When enabled, caught errors during the rendering of the template are written to the output instead of being handled by the lisp listener
</para></definitionitem></defvr>
<vindex index="vr" spaces=" "><indexterm index="vr" number="3">*current-store* [djula]</indexterm></vindex>
<anchor name="Variable-djula_003a_002acurrent_002dstore_002a">Variable djula:*current-store*</anchor>
<defvr spaces=" " endspaces=" "><definitionterm><indexterm index="vr" number="4">*current-store* [djula]</indexterm><defcategory bracketed="on">Variable</defcategory> <defvariable bracketed="on">*current-store* [djula]</defvariable></definitionterm>
<definitionitem><para>The currently in-use template store.  Defaults to a <code>file-store</code>.
</para></definitionitem></defvr>
<vindex index="vr" spaces=" "><indexterm index="vr" number="5">*default-template-arguments* [djula]</indexterm></vindex>
<anchor name="Variable-djula_003a_002adefault_002dtemplate_002darguments_002a">Variable djula:*default-template-arguments*</anchor>
<defvr spaces=" " endspaces=" "><definitionterm><indexterm index="vr" number="6">*default-template-arguments* [djula]</indexterm><defcategory bracketed="on">Variable</defcategory> <defvariable bracketed="on">*default-template-arguments* [djula]</defvariable></definitionterm>
<definitionitem><para>List of arguments available for all templates. Add arguments to this list if you want them to be available in every template.
This is a plist, so use getf to add arguments, like: (setf (getf djula:*default-template-arguments* :foo) &textrsquo;some-value)
</para></definitionitem></defvr>
<vindex index="vr" spaces=" "><indexterm index="vr" number="7">*djula-emptyp* [djula]</indexterm></vindex>
<anchor name="Variable-djula_003a_002adjula_002demptyp_002a">Variable djula:*djula-emptyp*</anchor>
<defvr spaces=" " endspaces=" "><definitionterm><indexterm index="vr" number="8">*djula-emptyp* [djula]</indexterm><defcategory bracketed="on">Variable</defcategory> <defvariable bracketed="on">*djula-emptyp* [djula]</defvariable></definitionterm>
<definitionitem><para>Change this to customize how djula decides if some value is empty or not
</para></definitionitem></defvr>
<vindex index="vr" spaces=" "><indexterm index="vr" number="9">*elision-string* [djula]</indexterm></vindex>
<anchor name="Variable-djula_003a_002aelision_002dstring_002a">Variable djula:*elision-string*</anchor>
<defvr spaces=" " endspaces=" "><definitionterm><indexterm index="vr" number="10">*elision-string* [djula]</indexterm><defcategory bracketed="on">Variable</defcategory> <defvariable bracketed="on">*elision-string* [djula]</defvariable></definitionterm>
<definitionitem><para>The string to be used by &textlsquo;truncatechars&textrsquo; at the end of truncated strings.
</para></definitionitem></defvr>
<vindex index="vr" spaces=" "><indexterm index="vr" number="11">*fancy-error-template-p* [djula]</indexterm></vindex>
<anchor name="Variable-djula_003a_002afancy_002derror_002dtemplate_002dp_002a">Variable djula:*fancy-error-template-p*</anchor>
<defvr spaces=" " endspaces=" "><definitionterm><indexterm index="vr" number="12">*fancy-error-template-p* [djula]</indexterm><defcategory bracketed="on">Variable</defcategory> <defvariable bracketed="on">*fancy-error-template-p* [djula]</defvariable></definitionterm>
<definitionitem><para>When enabled, show a fancy template when an error ocurrs
</para></definitionitem></defvr>
<vindex index="vr" spaces=" "><indexterm index="vr" number="13">*translation-backend* [djula]</indexterm></vindex>
<anchor name="Variable-djula_003a_002atranslation_002dbackend_002a">Variable djula:*translation-backend*</anchor>
<defvr spaces=" " endspaces=" "><definitionterm><indexterm index="vr" number="14">*translation-backend* [djula]</indexterm><defcategory bracketed="on">Variable</defcategory> <defvariable bracketed="on">*translation-backend* [djula]</defvariable></definitionterm>
<definitionitem><para>The translation backend. One of :locale, :gettext
</para></definitionitem></defvr>
<vindex index="vr" spaces=" "><indexterm index="vr" number="15">*verbose-errors-p* [djula]</indexterm></vindex>
<anchor name="Variable-djula_003a_002averbose_002derrors_002dp_002a">Variable djula:*verbose-errors-p*</anchor>
<defvr spaces=" " endspaces=" "><definitionterm><indexterm index="vr" number="16">*verbose-errors-p* [djula]</indexterm><defcategory bracketed="on">Variable</defcategory> <defvariable bracketed="on">*verbose-errors-p* [djula]</defvariable></definitionterm>
<definitionitem><para>When enabled, errors are displayed more verbosely. Good for debugging
</para></definitionitem></defvr>
<findex index="fn" spaces=" "><indexterm index="fn" number="1">add-template-directory [djula]</indexterm></findex>
<anchor name="Function-djula_003aadd_002dtemplate_002ddirectory">Function djula:add-template-directory</anchor>
<deffn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="2">add-template-directory [djula]</indexterm><defcategory bracketed="on">Function</defcategory> <deffunction bracketed="on">add-template-directory [djula]</deffunction> <defparam>directory</defparam> <defparam>&amp;</defparam><defparam>optional</defparam> <defparam>template-store</defparam></definitionterm>
<definitionitem><para>Adds <code>directory</code> to the search path of the <code>template-store</code>
</para></definitionitem></deffn>
<findex index="fn" spaces=" "><indexterm index="fn" number="3">compile-template [djula]</indexterm></findex>
<anchor name="Generic_002dFunction-djula_003acompile_002dtemplate">Generic-Function djula:compile-template</anchor>
<deffn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="4">compile-template [djula]</indexterm><defcategory bracketed="on">Generic Function</defcategory> <deffunction bracketed="on">compile-template [djula]</deffunction> <defparam>compiler</defparam> <defparam>name</defparam> <defparam>&amp;</defparam><defparam>optional</defparam> <defparam>error-p</defparam></definitionterm>
<definitionitem><para>Provides a hook to customize template compilation.
</para></definitionitem></deffn>
<tindex index="tp" spaces=" "><indexterm index="tp" number="1">file-store [djula]</indexterm></tindex>
<anchor name="Class-djula_003afile_002dstore">Class djula:file-store</anchor>
<deftp spaces=" " endspaces=" "><definitionterm><indexterm index="tp" number="2">file-store [djula]</indexterm><defcategory bracketed="on">Class</defcategory> <defdatatype bracketed="on">file-store [djula]</defdatatype></definitionterm>
<definitionitem><para>Class precedence list: <code>file-store, standard-object, t</code>
</para>
<para>Slots:
</para><itemize commandarg="bullet" endspaces=" "><itemprepend>&bullet;</itemprepend>
<listitem spaces=" "><prepend>&bullet;</prepend><para><code>current-path</code> &textmdash; 
</para>
<para>The location of the most-recently fetched template.
</para></listitem><listitem spaces=" "><prepend>&bullet;</prepend><para><code>search-path</code> &textmdash; initarg: <code><w>:search-path</w></code>; reader: <code><w>djula::search-path</w></code>; writer: <code><w>(setf djula::search-path)</w></code>
</para>
<para>User-provided list of template locations.
</para></listitem></itemize>

<para>Searches for template files on disk according to the given search path.
</para></definitionitem></deftp>
<vindex index="vr" spaces=" "><indexterm index="vr" number="17">*error-template* [djula]</indexterm></vindex>
<anchor name="Variable-djula_003a_002aerror_002dtemplate_002a">Variable djula:*error-template*</anchor>
<defvr spaces=" " endspaces=" "><definitionterm><indexterm index="vr" number="18">*error-template* [djula]</indexterm><defcategory bracketed="on">Variable</defcategory> <defvariable bracketed="on">*error-template* [djula]</defvariable></definitionterm>
<definitionitem><para>The error template used by &textlsquo;render-error-template&textrsquo;.
</para></definitionitem></defvr>
<vindex index="vr" spaces=" "><indexterm index="vr" number="19">*fancy-debug-p* [djula]</indexterm></vindex>
<anchor name="Variable-djula_003a_002afancy_002ddebug_002dp_002a">Variable djula:*fancy-debug-p*</anchor>
<defvr spaces=" " endspaces=" "><definitionterm><indexterm index="vr" number="20">*fancy-debug-p* [djula]</indexterm><defcategory bracketed="on">Variable</defcategory> <defvariable bracketed="on">*fancy-debug-p* [djula]</defvariable></definitionterm>
<definitionitem><para>When enabled, displays fancy html based debugging information for the &lbrace;% debug %&rbrace; tag
</para></definitionitem></defvr>
<findex index="fn" spaces=" "><indexterm index="fn" number="5">compile-template* [djula]</indexterm></findex>
<anchor name="Function-djula_003acompile_002dtemplate_002a">Function djula:compile-template*</anchor>
<deffn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="6">compile-template* [djula]</indexterm><defcategory bracketed="on">Function</defcategory> <deffunction bracketed="on">compile-template* [djula]</deffunction> <defparam>name</defparam></definitionterm>
<definitionitem><para>Compiles template <code>name</code> with compiler in <code>*current-compiler*</code>
</para></definitionitem></deffn>
<findex index="fn" spaces=" "><indexterm index="fn" number="7">fetch-template [djula]</indexterm></findex>
<anchor name="Generic_002dFunction-djula_003afetch_002dtemplate">Generic-Function djula:fetch-template</anchor>
<deffn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="8">fetch-template [djula]</indexterm><defcategory bracketed="on">Generic Function</defcategory> <deffunction bracketed="on">fetch-template [djula]</deffunction> <defparam>store</defparam> <defparam>key</defparam></definitionterm>
<definitionitem><para>Return the text of the template identified by the given key.
</para></definitionitem></deffn>
<findex index="fn" spaces=" "><indexterm index="fn" number="9">fetch-template* [djula]</indexterm></findex>
<anchor name="Function-djula_003afetch_002dtemplate_002a">Function djula:fetch-template*</anchor>
<deffn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="10">fetch-template* [djula]</indexterm><defcategory bracketed="on">Function</defcategory> <deffunction bracketed="on">fetch-template* [djula]</deffunction> <defparam>key</defparam></definitionterm>
<definitionitem><para>Return the text of a template fetched from the <code>*current-store*</code>.
</para></definitionitem></deffn>
<findex index="fn" spaces=" "><indexterm index="fn" number="11">find-template [djula]</indexterm></findex>
<anchor name="Generic_002dFunction-djula_003afind_002dtemplate">Generic-Function djula:find-template</anchor>
<deffn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="12">find-template [djula]</indexterm><defcategory bracketed="on">Generic Function</defcategory> <deffunction bracketed="on">find-template [djula]</deffunction> <defparam>store</defparam> <defparam>name</defparam> <defparam>&amp;</defparam><defparam>optional</defparam> <defparam>error-p</defparam></definitionterm>
<definitionitem><para>Return a hashable key that uniquely identifies the named template.
</para></definitionitem></deffn>
<anchor name="Method-djula_003afind_002dtemplate-_0028_0028store-file_002dstore_0029-name-_0026optional-_0028error_002dp-t_0029_0029">Method djula:find-template ((store file-store) name &amp;optional (error-p t))</anchor>
<deffn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="13">find-template [djula]</indexterm><defcategory bracketed="on">Method</defcategory> <deffunction bracketed="on">find-template [djula]</deffunction> <defdelimiter>(</defdelimiter><defparam>store</defparam> <defparam>file-store</defparam><defdelimiter>)</defdelimiter> <defparam>name</defparam> <defparam>&amp;</defparam><defparam>optional</defparam> <defdelimiter>(</defdelimiter><defparam>error-p</defparam> <defparam>t</defparam><defdelimiter>)</defdelimiter></definitionterm>
<definitionitem><para>Algorithm that finds a template in a file-store.
</para></definitionitem></deffn>
<findex index="fn" spaces=" "><indexterm index="fn" number="14">render-template* [djula]</indexterm></findex>
<anchor name="Function-djula_003arender_002dtemplate_002a">Function djula:render-template*</anchor>
<deffn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="15">render-template* [djula]</indexterm><defcategory bracketed="on">Function</defcategory> <deffunction bracketed="on">render-template* [djula]</deffunction> <defparam>template</defparam> <defparam>&amp;</defparam><defparam>optional</defparam> <defparam>stream</defparam> <defparam>&amp;</defparam><defparam>rest</defparam> <defparam>*template-arguments*</defparam></definitionterm>
<definitionitem><para>Render <code>template</code> into <code>stream</code> passing <code>*template-arguments*</code>
</para></definitionitem></deffn>
<findex index="fn" spaces=" "><indexterm index="fn" number="16">template-print-object [djula]</indexterm></findex>
<anchor name="Generic_002dFunction-djula_003atemplate_002dprint_002dobject">Generic-Function djula:template-print-object</anchor>
<deffn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="17">template-print-object [djula]</indexterm><defcategory bracketed="on">Generic Function</defcategory> <deffunction bracketed="on">template-print-object [djula]</deffunction> <defparam>object</defparam></definitionterm>
<definitionitem><para>Print an object in a template. Customize this function to implement custom printers for your objects.
</para></definitionitem></deffn>
<findex index="fn" spaces=" "><indexterm index="fn" number="18">url-encode [djula]</indexterm></findex>
<anchor name="Function-djula_003aurl_002dencode">Function djula:url-encode</anchor>
<deffn spaces=" " endspaces=" "><definitionterm><indexterm index="fn" number="19">url-encode [djula]</indexterm><defcategory bracketed="on">Function</defcategory> <deffunction bracketed="on">url-encode [djula]</deffunction> <defparam>string</defparam></definitionterm>
<definitionitem><para>URL-encodes a string using the external format <code>external-format</code>.
</para></definitionitem></deffn>

</chapter>
<node name="Function-Index" spaces=" "><nodename>Function Index</nodename><nodenext automatic="on">Variable Index</nodenext><nodeprev automatic="on">Dictionary</nodeprev><nodeup automatic="on">Top</nodeup></node>
<!-- comment  node-name,  next,  previous,  up -->
<appendix spaces=" "><sectiontitle>Function Index</sectiontitle>

<printindex value="fn" line="fn"></printindex>


</appendix>
<node name="Variable-Index" spaces=" "><nodename>Variable Index</nodename><nodenext automatic="on">Type Index</nodenext><nodeprev automatic="on">Function Index</nodeprev><nodeup automatic="on">Top</nodeup></node>
<!-- comment  node-name,  next,  previous,  up -->
<appendix spaces=" "><sectiontitle>Variable Index</sectiontitle>

<printindex value="vr" line="vr"></printindex>


</appendix>
<node name="Type-Index" spaces=" "><nodename>Type Index</nodename><nodeprev automatic="on">Variable Index</nodeprev><nodeup automatic="on">Top</nodeup></node>
<!-- comment  node-name,  next,  previous,  up -->
<appendix spaces=" "><sectiontitle>Type Index</sectiontitle>

<printindex value="tp" line="tp"></printindex>

</appendix>
<bye></bye>
</texinfo>
